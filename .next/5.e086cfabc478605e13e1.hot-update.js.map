{"version":3,"file":"5.e086cfabc478605e13e1.hot-update.js","sources":["webpack:///components/census/CensusAge.js","webpack:///pages/street.js"],"sourcesContent":[" import React from \"react\";\nimport _ from \"lodash\";\nimport {Doughnut, Bar} from 'react-chartjs-2';\n\nclass CensusAge extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            propertyDataLoading: false,\n            census: []\n        }\n    }\n\n    componentDidMount() {\n        this.getCensusGraphs(this.props.areacode);\n    }\n\n    updateCensusCode() {\n        let self = this;\n        fetch(process.env.BACKEND_URL + \"postcode/\"+ this.props.postcode + '/check')\n            .then(function(response) {\n                return response.json();\n            }).then(function(census) {\n            console.log(census);\n            self.setState({\n                censusCode:census.code,\n            });\n            this.forceUpdate();\n        });\n\n    }\n\n    getCensusGraphs(areacode) {\n        this.setState({propertyGraphsLoading: true});\n        let self = this;\n\n        fetch('http://www.nomisweb.co.uk/api/v01/dataset/NM_145_1.jsonstat.json?geography=' + areacode + '&rural_urban=0&measures=20100&_=58527')\n            .then(function (response) {\n                return response.json();\n            }).then(function (census) {\n            let values = census.value;\n            let keys = Object.values(census.dimension.cell.category.label);\n            let table = [];\n            let arr = [];\n\n            _.each(keys, function (k, i) {\n                table[k] = values[i];\n            });\n\n            self.setState(prevState => ({\n                propertyGraphsLoading: false,\n                census: table,\n\n            }));\n        });\n    }\n\n    formatData() {\n\n        let data = this.state.census;\n        let census = {\n            '0 - 14': _.get(data,'Age 0 to 4') + _.get(data,'Age 5 to 7') + _.get(data,'Age 8 to 9') +  _.get(data,'Age 10 to 14') + _.get(data,'Age 15'),\n            '15 - 24': _.get(data,'Age 16 to 17') + _.get(data,'Age 18 to 19') + _.get(data,'Age 20 to 24'),\n            '25 - 44': _.get(data,'Age 25 to 29') + _.get(data,'Age 30 to 44'),\n            '45 - 64' : _.get(data,'Age 45 to 59') + _.get(data,'Age 60 to 64'),\n            '65 +' : _.get(data,'Age 65 to 74') + _.get(data,'Age 75 to 84') + _.get(data,'Age 85 to 89') + _.get(data,'Age 90 and over')\n        };\n\n        return census;\n    }\n\n    render() {\n\n        let census = this.formatData();\n\n        const options = {\n            title: {\n                display:true,\n                text: 'Age'\n            },\n            legend: {\n                display:true,\n                position: 'bottom',\n\n            }};\n\n        const d = {'labels': _.keys(census), datasets: [\n                {\n                    label: 'Age',\n                    data: _.values(census),\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                    ],}]\n        };\n        return (\n            <div>\n                <div className=\"row\">\n                    {/*<div className=\"col\">*/}\n                        {/*<div className=\"table-responsive\">*/}\n                            {/*<table className=\"table\">*/}\n                                {/*<tbody>*/}\n                                {/*{ this.props.data.map( ( item ) => (*/}\n                                    {/*<tr key={ item.key } >*/}\n                                        {/*<td>{item.key}</td>*/}\n                                        {/*<td className=\"text-right\">{item.value}</td>*/}\n                                    {/*</tr>*/}\n                                {/*) ) }*/}\n                                {/*</tbody>*/}\n                            {/*</table>*/}\n                        {/*</div>*/}\n                    {/*</div>*/}\n                    <div className=\"col\">\n                        {(this.props.type === 'Bar') ? <Bar data={d} options={options} /> : <Doughnut data={d} options={options} />}\n                    </div>\n                </div>\n            </div>\n            );\n    }\n}\n\n\n\nexport default CensusAge;\n\n\n// WEBPACK FOOTER //\n// components/census/CensusAge.js","import React from \"react\";\nimport _ from \"lodash\";\nimport fetch from \"isomorphic-fetch\";\nimport moment from 'moment';\nimport GoogleMaps from \"../components/GoogleMaps\";\nimport CensusHousingType from \"../components/census/CensusHousingType\";\nimport CensusHousingTenure from \"../components/census/CensusHousingTenure\";\nimport CensusEthnicGroup from \"../components/census/CensusEthnicGroup\";\nimport LocalAreaList from \"../components/LocalAreaList\";\nimport CensusReligion from \"../components/census/CensusReligion\";\nimport CensusAge from \"../components/census/CensusAge\";\nimport CensusRelationshipStatus from \"../components/census/CensusRelationshipStatus\";\nimport CensusGender from \"../components/census/CensusGender\";\nimport CensusHealth from \"../components/census/CensusHealth\";\nimport CensusEducation from \"../components/census/CensusEducation\";\nclass Street extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isMarkerShown: false,\n            localAreaLoading: false,\n            localArea: [],\n            propertyDataLoading: false,\n            census: [],\n        }\n\n    }\n\n    delayedShowMarker() {\n        setTimeout(() => {\n            this.setState({isMarkerShown: true})\n        }, 3000)\n    }\n\n    handleMarkerClick() {\n        this.setState({isMarkerShown: false});\n        this.delayedShowMarker()\n    }\n\n    componentDidMount() {\n        this.delayedShowMarker();\n        this.getLocalArea(this.props.postcode);\n\n        if(this.props.addresses.census_code != null) {\n            this.setState({\n                censusCode:this.props.addresses.census_code,\n            });\n        }\n\n    }\n\n    pricesList(prices) {\n        let price = null;\n\n        if (!_.isEmpty(prices)) {\n            price = prices.map(function (p) {\n                return (\n                    <div key={p.id}>\n                        {p.sold_date} - &pound;{p.price}\n                    </div>\n                );\n            });\n        }\n\n        return price;\n    }\n\n\n\n    getLocalArea(postcode) {\n        this.setState({localAreaLoading:true});\n        let self = this;\n\n        fetch(process.env.BACKEND_URL + \"postcode/\"+ postcode + '/localarea')\n            .then(function(response) {\n               return response.json();\n        }).then(function(localArea) {\n            self.setState(prevState => ({\n                localAreaLoading: false,\n                localArea: [...prevState.localArea,localArea]\n            }));\n        });\n    }\n\n\n    render() {\n\n        if (_.isEmpty(this.props.addresses) && _.isEmpty(this.props.sold_prices)) {\n            return null;\n        }\n\n        const housePriceIndex = _.orderBy(this.props.addresses.hpi, [\"date\"], [\"desc\"])[0][0];\n        const {addresses} = this.props.addresses;\n\n        let marker = {lng: _.toNumber(this.props.addresses.lng), lat: _.toNumber(this.props.addresses.lat)};\n        let localArea = _.head(this.state.localArea);\n\n\n\n        return (\n            <div>\n                <div className=\"container postcode-page\">\n                    <div className=\"row\">\n\n                    <div className=\"col\">\n                        <h1>{this.props.postcode} Area Report</h1>\n                        <p>\n                            <span>Below you will find key statistics including sold prices, property valuations, energy performance, crime and local services for the { _.first(this.props.addresses.addresses.data).street }, { _.first(this.props.addresses.addresses.data).town}, { _.first(this.props.addresses.addresses.data).postcode} area. If you want specific property information select the address under ‘Properties Section’. You can freely use our AVM to generate property valuations and our EnergyVault app to predict a properties efficiency and running costs. </span>\n                        </p>\n\n                        <GoogleMaps\n                            isMarkerShown={this.state.isMarkerShown}\n                            onMarkerClick={this.handleMarkerClick}\n                            markerPosition={marker}\n                            zoom={11}\n                        />\n                        <br />\n\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <CensusHousingType areacode={this.state.censusCode} />\n                            </div>\n                            <div className=\"col\">\n                                <CensusHousingTenure areacode={this.state.censusCode} />\n                            </div>\n                        </div>\n\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <CensusEthnicGroup areacode={this.state.censusCode} />\n                            </div>\n                            <div className=\"col\">\n                                <CensusReligion areacode={this.state.censusCode} />\n                            </div>\n                        </div>\n\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <CensusAge areacode={this.state.censusCode} />\n                            </div>\n                            <div className=\"col\">\n                                <CensusEducation areacode={this.state.censusCode} />\n                            </div>\n                        </div>\n\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <CensusGender areacode={this.state.censusCode} />\n                            </div>\n                            <div className=\"col\">\n                                <CensusHealth areacode={this.state.censusCode} />\n                            </div>\n                        </div>\n\n                        <h2>Sold Prices</h2>\n                        {this.props.sold_prices.map((price) => (\n                            <div key={price.id}>\n                                <div className=\"row\">\n                                    <div className=\"col\">\n                                        <div className=\"table-responsive\">\n                                        <table className=\"table\">\n                                            <tbody>\n                                            <tr>\n                                                <td  scope=\"row\"><b>{price.poan} {price.street}</b> - Sold on <i>{moment(price.sold_date,\"YYYY-MM-DD HH:mm:ss\").format('Do MMMM YYYY')}</i> </td>\n\n                                                <td className=\"text-right \">&pound;{price.price}</td>\n                                            </tr>\n                                            </tbody>\n                                        </table>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        ))}\n                        <div className=\"row\">\n                            <div className=\"col text-center\">\n                                <button className=\"btn btn-link \">Load More</button>\n                            </div>\n                        </div>\n\n                        <h2>Local Area</h2>\n                        {(!_.isEmpty(localArea)) ?\n                        <div >\n                            <h3>Closest Primary Schools to this address </h3>\n                            <LocalAreaList list={localArea.primary_schools}/>\n                        </div> : ''}\n                        {(!_.isEmpty(localArea)) ?\n                            <div>\n                                <h3>Closest Secondary Schools to this address </h3>\n                                <LocalAreaList list={localArea.secondary_schools}/>\n                            </div>\n                         : ''}\n\n                        <h2>Properties</h2>\n                        {addresses.data.map((address) => (\n\n                            <div key={address.id}>\n                                <div className=\"row\">\n                                        <div className=\"col\">\n                                            <div className=\"property-header\">\n                                            <h6>{address.full_address} <i className=\"fas fa-caret-right\"></i></h6>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <hr />\n                                    <div className=\"col\">\n                                        <img src={ encodeURI(\"https://maps.googleapis.com/maps/api/streetview?size=100x100&location=\"+ address.house_number +\",\" +address.street +\",\"+ address.postcode+ \"&fov=60&pitch=5&key=AIzaSyAcODcVyIBZJhmueCEdpCU7MNlMISDGSkQ\")}  className=\"property-image\"/>\n                                    </div>\n                                    <div className=\"col\">\n                                    Last Sold Price<br />\n                                         {(!_.isNaN(_.meanBy(address.prices.data,\"price\"))) ? (\"£\" + _.meanBy(address.prices.data,\"price\")) : 'No sales history for this property'}\n                                    </div>\n                                    <div className=\"col\">\n                                    EPC Rating<br />\n                                        {(_.first(_.orderBy(address.epc.data,['id'],['desc']))) ? _.first(_.orderBy(address.epc.data,['id'],['desc'])).current_energy_rating : 'None'}\n                                    </div>\n                                    <div className=\"col text-right\">\n                                        <h5>{(address.valuation && housePriceIndex.index) ? 'Estimated Value £' + _.round(_.multiply(_.divide(parseInt(address.valuation.data.predicted_valuation), 100), parseInt(housePriceIndex.index))).toLocaleString() :\n                                        <button className=\"btn btn-primary\">Request Valuation</button>}</h5>\n                                    </div>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nStreet.getInitialProps = async ({ req , query: { postcode } }) => {\n    const res = await fetch(process.env.BACKEND_URL + \"postcode/\"+ postcode);\n    console.log(process.env.BACKEND_URL + \"postcode/\"+ postcode);\n    const json = await res.json();\n    console.log(json);\n    return { addresses: json.postcode_details.data, sold_prices: json.sold_prices, postcode:postcode }\n};\nexport default Street;\n\n\n\n// WEBPACK FOOTER //\n// pages/street.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAFA;AAMA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;;;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AACA;;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAWA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AAxHA;AACA;AA4HA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAUA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;;;AAIA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AACA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AAmzBA;AAmCA;;;;AAtNA;AACA;AAuNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAKA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}
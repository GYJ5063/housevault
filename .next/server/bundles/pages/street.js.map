{"version":3,"file":"bundles/pages/street.js","sources":["webpack:///webpack/bootstrap 08faa3d78f3e87a45946","webpack:///components/GoogleMaps.js","webpack:///components/LocalAreaList.js","webpack:///components/census/CensusAge.js","webpack:///components/census/CensusEducation.js","webpack:///components/census/CensusEthnicGroup.js","webpack:///components/census/CensusGender.js","webpack:///components/census/CensusHealth.js","webpack:///components/census/CensusHousingTenure.js","webpack:///components/census/CensusHousingType.js","webpack:///components/census/CensusReligion.js","webpack:///pages/street.js","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"isomorphic-fetch\"","webpack:///external \"lodash\"","webpack:///external \"moment\"","webpack:///external \"moment/moment\"","webpack:///external \"react\"","webpack:///external \"react-chartjs-2\"","webpack:///external \"react-google-maps\"","webpack:///external \"recompose\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 08faa3d78f3e87a45946","import React from \"react\"\nimport { compose, withProps } from \"recompose\"\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\"\nimport _ from \"lodash\";\n\nconst GoogleMaps = compose(\n    withProps({\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAlqPHMEeUsDo4e5zSKGYeCtFuz_apFSYw&v=3.exp&libraries=geometry,drawing,places\",\n        loadingElement: <div style={{ height: `100%` }} />,\n        containerElement: <div style={{ height: `400px` }} />,\n        mapElement: <div style={{ height: `100%` }} />,\n    }),\n    withScriptjs,\n    withGoogleMap\n)((props) =>\n    <GoogleMap\n        defaultZoom={props.zoom}\n        defaultCenter={props.markerPosition}\n    >\n        {props.isMarkerShown && <Marker position={props.markerPosition} onClick={props.onMarkerClick} />}\n    </GoogleMap>\n);\n\n\nexport default GoogleMaps;\n\n\n// WEBPACK FOOTER //\n// components/GoogleMaps.js","import fetch from \"isomorphic-fetch\";\nimport React from \"react\";\nimport moment from \"moment/moment\";\nimport _ from \"lodash\";\n\nclass LocalAreaList extends React.Component {\n\n    render() {\n        if (_.isEmpty(this.props.list)) {\n            return 'Loading';\n        }\n        return (\n            <div className=\"table-responsive\">\n                <table className=\"table\">\n                    <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th className=\"text-right\">Distance</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                        { this.props.list.map( ( hospital ) => (\n                            <tr key={ hospital.id } >\n                                <td>{hospital.name}</td>\n                                <td className=\"text-right\">{_.round(hospital.distance,1)} miles</td>\n                            </tr>\n                        ) ) }\n                    </tbody>\n                </table>\n            </div>\n            );\n    }\n}\n\n\n\nexport default LocalAreaList;\n\n\n// WEBPACK FOOTER //\n// components/LocalAreaList.js"," import React from \"react\";\nimport _ from \"lodash\";\nimport {Doughnut, Bar} from 'react-chartjs-2';\n\nclass CensusAge extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            propertyDataLoading: false,\n            census: []\n        }\n    }\n\n    componentDidMount() {\n        this.getCensusGraphs(this.props.areacode);\n    }\n\n    getCensusGraphs(areacode) {\n        this.setState({propertyGraphsLoading: true});\n        let self = this;\n\n        fetch('http://www.nomisweb.co.uk/api/v01/dataset/NM_145_1.jsonstat.json?geography=' + areacode + '&rural_urban=0&measures=20100&_=58527')\n            .then(function (response) {\n                return response.json();\n            }).then(function (census) {\n            let values = census.value;\n            let keys = Object.values(census.dimension.cell.category.label);\n            let table = [];\n            let arr = [];\n\n            _.each(keys, function (k, i) {\n                table[k] = values[i];\n            });\n\n            self.setState(prevState => ({\n                propertyGraphsLoading: false,\n                census: table,\n\n            }));\n        });\n    }\n\n    formatData() {\n\n        let data = this.state.census;\n        let census = {\n            '0 - 14': _.get(data,'Age 0 to 4') + _.get(data,'Age 5 to 7') + _.get(data,'Age 8 to 9') +  _.get(data,'Age 10 to 14') + _.get(data,'Age 15'),\n            '15 - 24': _.get(data,'Age 16 to 17') + _.get(data,'Age 18 to 19') + _.get(data,'Age 20 to 24'),\n            '25 - 44': _.get(data,'Age 25 to 29') + _.get(data,'Age 30 to 44'),\n            '45 - 64' : _.get(data,'Age 45 to 59') + _.get(data,'Age 60 to 64'),\n            '65 +' : _.get(data,'Age 65 to 74') + _.get(data,'Age 75 to 84') + _.get(data,'Age 85 to 89') + _.get(data,'Age 90 and over')\n        };\n\n        return census;\n    }\n\n    render() {\n\n        let census = this.formatData();\n\n        const options = {\n            title: {\n                display:true,\n                text: 'Age'\n            },\n            legend: {\n                display:true,\n                position: 'bottom',\n\n            }};\n\n        const d = {'labels': _.keys(census), datasets: [\n                {\n                    label: 'Age',\n                    data: _.values(census),\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                    ],}]\n        };\n        return (\n            <div>\n                <div className=\"row\">\n                    {/*<div className=\"col\">*/}\n                        {/*<div className=\"table-responsive\">*/}\n                            {/*<table className=\"table\">*/}\n                                {/*<tbody>*/}\n                                {/*{ this.props.data.map( ( item ) => (*/}\n                                    {/*<tr key={ item.key } >*/}\n                                        {/*<td>{item.key}</td>*/}\n                                        {/*<td className=\"text-right\">{item.value}</td>*/}\n                                    {/*</tr>*/}\n                                {/*) ) }*/}\n                                {/*</tbody>*/}\n                            {/*</table>*/}\n                        {/*</div>*/}\n                    {/*</div>*/}\n                    <div className=\"col\">\n                        {(this.props.type === 'Bar') ? <Bar data={d} options={options} /> : <Doughnut data={d} options={options} />}\n                    </div>\n                </div>\n            </div>\n            );\n    }\n}\n\n\n\nexport default CensusAge;\n\n\n// WEBPACK FOOTER //\n// components/census/CensusAge.js","import React from \"react\";\nimport _ from \"lodash\";\nimport {Doughnut, Bar} from 'react-chartjs-2';\nclass CensusEducation extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            propertyDataLoading: false,\n            census: []\n        }\n    }\n\n    componentDidMount() {\n        this.getCensusGraphs(this.props.areacode);\n    }\n\n    getCensusGraphs(areacode) {\n        this.setState({propertyGraphsLoading: true});\n        let self = this;\n\n        fetch('http://www.nomisweb.co.uk/api/v01/dataset/NM_623_1.jsonstat.json?geography=' + areacode + '&rural_urban=0&measures=20100&_=58527')\n            .then(function (response) {\n                return response.json();\n            }).then(function (census) {\n            let values = census.value;\n            let keys = Object.values(census.dimension.cell.category.label);\n            let table = [];\n\n            _.each(keys, function (k, i) {\n                table[k] = values[i];\n            });\n\n            self.setState(prevState => ({\n                propertyGraphsLoading: false,\n                census: table,\n\n            }));\n        });\n    }\n\n    formatData() {\n\n        let data = this.state.census;\n\n        let census = {\n            'Degree or similar': _.get(data,'Highest level of qualification: Level 4 qualifications and above'),\n            'Apprenticeship': _.get(data,'Highest level of qualification: Apprenticeship'),\n            '2+ A Levels': _.get(data,'Highest level of qualification: Level 3 qualifications'),\n            '1-4 GCSEs': _.get(data,'Highest level of qualification: Level 1 qualifications'),\n            'No GCSEs': _.get(data,'No qualifications'),\n            'Other': _.get(data,'Highest level of qualification: Other qualifications'),\n        };\n\n        return census;\n    }\n\n    render() {\n\n        let census = this.formatData();\n\n        const options = {\n            title: {\n                display:true,\n                text: 'Education'\n            },\n            legend: {\n                display:true,\n                position: 'bottom',\n\n            }};\n\n        const d = {'labels': _.keys(census), datasets: [\n                {\n                    label: this.props.label,\n                    data: _.values(census),\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                    ],}]\n        };\n        return (\n            <div>\n                <div className=\"row\">\n                    {/*<div className=\"col\">*/}\n                        {/*<div className=\"table-responsive\">*/}\n                            {/*<table className=\"table\">*/}\n                                {/*<tbody>*/}\n                                {/*{ this.props.data.map( ( item ) => (*/}\n                                    {/*<tr key={ item.key } >*/}\n                                        {/*<td>{item.key}</td>*/}\n                                        {/*<td className=\"text-right\">{item.value}</td>*/}\n                                    {/*</tr>*/}\n                                {/*) ) }*/}\n                                {/*</tbody>*/}\n                            {/*</table>*/}\n                        {/*</div>*/}\n                    {/*</div>*/}\n                    <div className=\"col\">\n                        {(this.props.type === 'Bar') ? <Bar data={d} options={options} /> : <Doughnut data={d} options={options} />}\n                    </div>\n                </div>\n            </div>\n            );\n    }\n}\n\n\n\nexport default CensusEducation;\n\n\n// WEBPACK FOOTER //\n// components/census/CensusEducation.js","import React from \"react\";\nimport _ from \"lodash\";\nimport {Doughnut, Bar} from 'react-chartjs-2';\n\nclass CensusEthnicGroup extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            propertyDataLoading: false,\n            census: []\n        }\n    }\n\n    componentDidMount() {\n        this.getCensusGraphs(this.props.areacode);\n    }\n\n    getCensusGraphs(areacode) {\n        this.setState({propertyGraphsLoading: true});\n        let self = this;\n\n        fetch('http://www.nomisweb.co.uk/api/v01/dataset/NM_608_1.jsonstat.json?geography=' + areacode + '&rural_urban=0&measures=20100&_=58527')\n            .then(function (response) {\n                return response.json();\n            }).then(function (census) {\n            let values = census.value;\n            let keys = Object.values(census.dimension.cell.category.label);\n            let table = [];\n            let arr = [];\n\n            _.each(keys, function (k, i) {\n                table[k] = values[i];\n            });\n\n            self.setState(prevState => ({\n                propertyGraphsLoading: false,\n                census: table,\n\n            }));\n        });\n    }\n\n    formatData() {\n\n        let data = this.state.census;\n\n        let census = {\n            'White': _.get(data,'White') + _.get(data,'White: English/Welsh/Scottish/Northern Irish/British') + _.get(data,'White: Gypsy or Irish Traveller') +  _.get(data,'White: Irish') + _.get(data,'White: Other White'),\n            'Mixed Ethnicity': _.get(data,'Mixed/multiple ethnic groups') + _.get(data,'Mixed/multiple ethnic groups: Other Mixed') + _.get(data,'Mixed/multiple ethnic groups: White and Asian') + _.get(data,'Mixed/multiple ethnic groups: White and Black African') + _.get(data,'Mixed/multiple ethnic groups: White and Black Caribbean'),\n            'Asian': _.get(data,'Asian/Asian British') + _.get(data,'Asian/Asian British: Bangladeshi') + _.get(data,'Asian/Asian British: Chinese') + _.get(data,'Asian/Asian British: Indian') + _.get(data,'Asian/Asian British: Other Asian') + _.get(data,'Asian/Asian British: Pakistani'),\n            'Black' : _.get(data,'Black/African/Caribbean/Black British') + _.get(data,'Black/African/Caribbean/Black British: African') + _.get(data,'Black/African/Caribbean/Black British: Caribbean') + _.get(data,'Black/African/Caribbean/Black British: Other Black'),\n            'Other' : _.get(data,'Other ethnic group') + _.get(data,'Other ethnic group: Any other ethnic group') + _.get(data,'Other ethnic group: Arab')\n        };\n\n        return census;\n    }\n\n    render() {\n\n        let census = this.formatData();\n\n        const options = {\n            title: {\n                display:true,\n                text: 'Ethnic Group'\n            },\n            legend: {\n                display:true,\n                position: 'bottom',\n\n            }};\n\n        const d = {'labels': _.keys(census), datasets: [\n                {\n                    label: this.props.label,\n                    data: _.values(census),\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                    ],}]\n        };\n        return (\n            <div>\n                <div className=\"row\">\n                    {/*<div className=\"col\">*/}\n                        {/*<div className=\"table-responsive\">*/}\n                            {/*<table className=\"table\">*/}\n                                {/*<tbody>*/}\n                                {/*{ this.props.data.map( ( item ) => (*/}\n                                    {/*<tr key={ item.key } >*/}\n                                        {/*<td>{item.key}</td>*/}\n                                        {/*<td className=\"text-right\">{item.value}</td>*/}\n                                    {/*</tr>*/}\n                                {/*) ) }*/}\n                                {/*</tbody>*/}\n                            {/*</table>*/}\n                        {/*</div>*/}\n                    {/*</div>*/}\n                    <div className=\"col\">\n                        {(this.props.type === 'Bar') ? <Bar data={d} options={options} /> : <Doughnut data={d} options={options} />}\n                    </div>\n                </div>\n            </div>\n            );\n    }\n}\n\n\n\nexport default CensusEthnicGroup;\n\n\n// WEBPACK FOOTER //\n// components/census/CensusEthnicGroup.js","import React from \"react\";\nimport _ from \"lodash\";\nimport {Doughnut, Bar} from 'react-chartjs-2';\nclass CensusHousingType extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            propertyDataLoading: false,\n            census: []\n        }\n    }\n\n    componentDidMount() {\n        this.getCensusGraphs(this.props.areacode);\n    }\n\n    getCensusGraphs(areacode) {\n        this.setState({propertyGraphsLoading: true});\n        let self = this;\n\n        fetch('http://www.nomisweb.co.uk/api/v01/dataset/NM_144_1.jsonstat.json?geography=' + areacode + '&rural_urban=0&measures=20100&_=58527')\n            .then(function (response) {\n                return response.json();\n            }).then(function (census) {\n            let values = census.value;\n            let keys = Object.values(census.dimension.cell.category.label);\n            let table = [];\n\n            _.each(keys, function (k, i) {\n                table[k] = values[i];\n            });\n\n            self.setState(prevState => ({\n                propertyGraphsLoading: false,\n                census: table,\n\n            }));\n        });\n    }\n\n    formatData() {\n\n        let data = this.state.census;\n\n        let census = {\n            'Male': _.get(data,'Males'),\n            'Female': _.get(data,'Females'),\n        };\n\n        return census;\n    }\n\n    render() {\n\n        let census = this.formatData();\n\n        const options = {\n            title: {\n                display:true,\n                text: 'Gender'\n            },\n            legend: {\n                display:true,\n                position: 'bottom',\n\n            }};\n\n        const d = {'labels': _.keys(census), datasets: [\n                {\n                    label: this.props.label,\n                    data: _.values(census),\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                    ],}]\n        };\n        return (\n            <div>\n                <div className=\"row\">\n                    {/*<div className=\"col\">*/}\n                        {/*<div className=\"table-responsive\">*/}\n                            {/*<table className=\"table\">*/}\n                                {/*<tbody>*/}\n                                {/*{ this.props.data.map( ( item ) => (*/}\n                                    {/*<tr key={ item.key } >*/}\n                                        {/*<td>{item.key}</td>*/}\n                                        {/*<td className=\"text-right\">{item.value}</td>*/}\n                                    {/*</tr>*/}\n                                {/*) ) }*/}\n                                {/*</tbody>*/}\n                            {/*</table>*/}\n                        {/*</div>*/}\n                    {/*</div>*/}\n                    <div className=\"col\">\n                        {(this.props.type === 'Bar') ? <Bar data={d} options={options} /> : <Doughnut data={d} options={options} />}\n                    </div>\n                </div>\n            </div>\n            );\n    }\n}\n\n\n\nexport default CensusHousingType;\n\n\n// WEBPACK FOOTER //\n// components/census/CensusGender.js","import React from \"react\";\nimport _ from \"lodash\";\nimport {Doughnut, Bar} from 'react-chartjs-2';\nclass CensusHealth extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            propertyDataLoading: false,\n            census: []\n        }\n    }\n\n    componentDidMount() {\n        this.getCensusGraphs(this.props.areacode);\n    }\n\n    getCensusGraphs(areacode) {\n        this.setState({propertyGraphsLoading: true});\n        let self = this;\n\n        fetch('http://www.nomisweb.co.uk/api/v01/dataset/NM_617_1.jsonstat.json?geography=' + areacode + '&rural_urban=0&measures=20100&_=58527')\n            .then(function (response) {\n                return response.json();\n            }).then(function (census) {\n            let values = census.value;\n            let keys = Object.values(census.dimension.cell.category.label);\n            let table = [];\n\n            _.each(keys, function (k, i) {\n                table[k] = values[i];\n            });\n\n            self.setState(prevState => ({\n                propertyGraphsLoading: false,\n                census: table,\n\n            }));\n        });\n    }\n\n    formatData() {\n\n        let data = this.state.census;\n\n        let census = {\n            'Very good health': _.get(data,'Very good health'),\n            'Good health': _.get(data,'Good health'),\n            'Fair health': _.get(data,'Fair health'),\n            'Bad health': _.get(data,'Bad health'),\n            'Very Bad health': _.get(data,'Very bad health'),\n        };\n\n        return census;\n    }\n\n    render() {\n\n        let census = this.formatData();\n\n        const options = {\n            title: {\n                display:true,\n                text: 'Health'\n            },\n            legend: {\n                display:true,\n                position: 'bottom',\n\n            }};\n\n        const d = {'labels': _.keys(census), datasets: [\n                {\n                    data: _.values(census),\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                    ],}]\n        };\n        return (\n            <div>\n                <div className=\"row\">\n                    {/*<div className=\"col\">*/}\n                        {/*<div className=\"table-responsive\">*/}\n                            {/*<table className=\"table\">*/}\n                                {/*<tbody>*/}\n                                {/*{ this.props.data.map( ( item ) => (*/}\n                                    {/*<tr key={ item.key } >*/}\n                                        {/*<td>{item.key}</td>*/}\n                                        {/*<td className=\"text-right\">{item.value}</td>*/}\n                                    {/*</tr>*/}\n                                {/*) ) }*/}\n                                {/*</tbody>*/}\n                            {/*</table>*/}\n                        {/*</div>*/}\n                    {/*</div>*/}\n                    <div className=\"col\">\n                        {(this.props.type === 'Bar') ? <Bar data={d} options={options} /> : <Doughnut data={d} options={options} />}\n                    </div>\n                </div>\n            </div>\n            );\n    }\n}\n\n\n\nexport default CensusHealth;\n\n\n// WEBPACK FOOTER //\n// components/census/CensusHealth.js","import React from \"react\";\nimport _ from \"lodash\";\nimport {Doughnut, Bar} from 'react-chartjs-2';\nclass CensusHousingType extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            propertyDataLoading: false,\n            census: []\n        }\n    }\n\n    componentDidMount() {\n        this.getCensusGraphs(this.props.areacode);\n    }\n\n    getCensusGraphs(areacode) {\n        this.setState({propertyGraphsLoading: true});\n        let self = this;\n\n        fetch('http://www.nomisweb.co.uk/api/v01/dataset/NM_619_1.jsonstat.json?geography=' + areacode + '&rural_urban=0&measures=20100&_=58527')\n            .then(function (response) {\n                return response.json();\n            }).then(function (census) {\n            let values = census.value;\n            let keys = Object.values(census.dimension.cell.category.label);\n            let table = [];\n\n            _.each(keys, function (k, i) {\n                table[k] = values[i];\n            });\n\n            self.setState(prevState => ({\n                propertyGraphsLoading: false,\n                census: table,\n\n            }));\n        });\n    }\n\n    formatData() {\n\n        let data = this.state.census;\n\n        let census = {\n            'Owned Outright': _.get(data,'Owned: Owned outright'),\n            'Owned with Mortgage': _.get(data,'Owned: Owned with a mortgage or loan'),\n            'Shared Ownership': _.get(data,'Shared ownership (part owned and part rented)'),\n            'Rented: From Council' : _.get(data,'Social rented: Rented from council (Local Authority)'),\n            'Rented: Private' : _.get(data,'Social rented: Other'),\n            'Rent Free' : _.get(data,'Living rent free')\n        };\n\n        return census;\n    }\n\n    render() {\n\n        let census = this.formatData();\n\n        const options = {\n            title: {\n                display:true,\n                text: 'Housing Tenure'\n            },\n            legend: {\n                display:true,\n                position: 'bottom',\n\n            }};\n\n        const d = {'labels': _.keys(census), datasets: [\n                {\n                    label: this.props.label,\n                    data: _.values(census),\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                    ],}]\n        };\n        return (\n            <div>\n                <div className=\"row\">\n                    {/*<div className=\"col\">*/}\n                        {/*<div className=\"table-responsive\">*/}\n                            {/*<table className=\"table\">*/}\n                                {/*<tbody>*/}\n                                {/*{ this.props.data.map( ( item ) => (*/}\n                                    {/*<tr key={ item.key } >*/}\n                                        {/*<td>{item.key}</td>*/}\n                                        {/*<td className=\"text-right\">{item.value}</td>*/}\n                                    {/*</tr>*/}\n                                {/*) ) }*/}\n                                {/*</tbody>*/}\n                            {/*</table>*/}\n                        {/*</div>*/}\n                    {/*</div>*/}\n                    <div className=\"col\">\n                        {(this.props.type === 'Bar') ? <Bar data={d} options={options} /> : <Doughnut data={d} options={options} />}\n                    </div>\n                </div>\n            </div>\n            );\n    }\n}\n\n\n\nexport default CensusHousingType;\n\n\n// WEBPACK FOOTER //\n// components/census/CensusHousingTenure.js","import React from \"react\";\nimport _ from \"lodash\";\nimport {Doughnut, Bar} from 'react-chartjs-2';\nclass CensusHousingType extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            propertyDataLoading: false,\n            census: []\n        }\n    }\n\n    componentDidMount() {\n        this.getCensusGraphs(this.props.areacode);\n    }\n\n    getCensusGraphs(areacode) {\n        this.setState({propertyGraphsLoading: true});\n        let self = this;\n\n        fetch('http://www.nomisweb.co.uk/api/v01/dataset/NM_618_1.jsonstat.json?geography=' + areacode + '&rural_urban=0&measures=20100&_=58527')\n            .then(function (response) {\n                return response.json();\n            }).then(function (census) {\n            let values = census.value;\n            let keys = Object.values(census.dimension.cell.category.label);\n            let table = [];\n            let arr = [];\n\n            _.each(keys, function (k, i) {\n                table[k] = values[i];\n            });\n\n            self.setState(prevState => ({\n                propertyGraphsLoading: false,\n                census: table,\n\n            }));\n        });\n    }\n\n    formatData() {\n\n        let data = this.state.census;\n\n        let census = {\n            'Detached': _.get(data,'Whole house or bungalow: Detached'),\n            'Semi Detached': _.get(data,'Whole house or bungalow: Semi-detached'),\n            'Terraced': _.get(data,'Whole house or bungalow: Terraced (including end-terrace)'),\n            'Flat (Purpose Built)' : _.get(data,'Flat, maisonette or apartment: Purpose-built block of flats or tenement'),\n            'Flat (Converted)' : _.get(data,'Flat, maisonette or apartment: Part of a converted or shared house (including bed-sits)')\n        };\n\n        return census;\n    }\n\n    render() {\n\n        let census = this.formatData();\n\n        const options = {\n            title: {\n                display:true,\n                text: 'Housing Types'\n            },\n            legend: {\n                display:true,\n                position: 'bottom',\n\n            }};\n\n        const d = {'labels': _.keys(census), datasets: [\n                {\n                    label: this.props.label,\n                    data: _.values(census),\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                    ],}]\n        };\n        return (\n            <div>\n                <div className=\"row\">\n                    {/*<div className=\"col\">*/}\n                        {/*<div className=\"table-responsive\">*/}\n                            {/*<table className=\"table\">*/}\n                                {/*<tbody>*/}\n                                {/*{ this.props.data.map( ( item ) => (*/}\n                                    {/*<tr key={ item.key } >*/}\n                                        {/*<td>{item.key}</td>*/}\n                                        {/*<td className=\"text-right\">{item.value}</td>*/}\n                                    {/*</tr>*/}\n                                {/*) ) }*/}\n                                {/*</tbody>*/}\n                            {/*</table>*/}\n                        {/*</div>*/}\n                    {/*</div>*/}\n                    <div className=\"col\">\n                        {(this.props.type === 'Bar') ? <Bar data={d} options={options} /> : <Doughnut data={d} options={options} />}\n                    </div>\n                </div>\n            </div>\n            );\n    }\n}\n\n\n\nexport default CensusHousingType;\n\n\n// WEBPACK FOOTER //\n// components/census/CensusHousingType.js","import React from \"react\";\nimport _ from \"lodash\";\nimport {Doughnut, Bar} from 'react-chartjs-2';\n\nclass CensusReligion extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            propertyDataLoading: false,\n            census: []\n        }\n    }\n\n    componentDidMount() {\n        this.getCensusGraphs(this.props.areacode);\n    }\n\n    getCensusGraphs(areacode) {\n        this.setState({propertyGraphsLoading: true});\n        let self = this;\n\n        fetch('http://www.nomisweb.co.uk/api/v01/dataset/NM_616_1.jsonstat.json?geography=' + areacode + '&rural_urban=0&measures=20100&_=58527')\n            .then(function (response) {\n                return response.json();\n            }).then(function (census) {\n            let values = census.value;\n            let keys = Object.values(census.dimension.cell.category.label);\n            let table = [];\n            let arr = [];\n\n            _.each(keys, function (k, i) {\n                table[k] = values[i];\n            });\n\n            self.setState(prevState => ({\n                propertyGraphsLoading: false,\n                census: table,\n\n            }));\n        });\n    }\n\n    formatData() {\n\n        let data = this.state.census;\n\n        let census = {\n            'Buddhist': _.get(data,'Buddhist'),\n            'Christian': _.get(data,'Christian'),\n            'Has religion': _.get(data,'Has religion') ,\n            'Hindu' : _.get(data,'Hindu') ,\n            'Jewish' : _.get(data,'Jewish'),\n            'Muslim' : _.get(data,'Muslim'),\n            'Sikh' : _.get(data,'Sikh'),\n            'No religion' : _.get(data,'No religion'),\n            'Other religion' : _.get(data,'Other religion'),\n            'Religion not stated' : _.get(data,'Religion not stated')\n        };\n\n        return census;\n    }\n\n    render() {\n\n        let census = this.formatData();\n\n        const options = {\n            title: {\n                display:true,\n                text: 'Religion'\n            },\n            legend: {\n                display:true,\n                position: 'bottom',\n\n            }};\n\n        const d = {'labels': _.keys(census), datasets: [\n                {\n                    label: this.props.label,\n                    data: _.values(census),\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                    ],}]\n        };\n        return (\n            <div>\n                <div className=\"row\">\n                    {/*<div className=\"col\">*/}\n                        {/*<div className=\"table-responsive\">*/}\n                            {/*<table className=\"table\">*/}\n                                {/*<tbody>*/}\n                                {/*{ this.props.data.map( ( item ) => (*/}\n                                    {/*<tr key={ item.key } >*/}\n                                        {/*<td>{item.key}</td>*/}\n                                        {/*<td className=\"text-right\">{item.value}</td>*/}\n                                    {/*</tr>*/}\n                                {/*) ) }*/}\n                                {/*</tbody>*/}\n                            {/*</table>*/}\n                        {/*</div>*/}\n                    {/*</div>*/}\n                    <div className=\"col\">\n                        {(this.props.type === 'Bar') ? <Bar data={d} options={options} /> : <Doughnut data={d} options={options} />}\n                    </div>\n                </div>\n            </div>\n            );\n    }\n}\n\n\n\nexport default CensusReligion;\n\n\n// WEBPACK FOOTER //\n// components/census/CensusReligion.js","import React from \"react\";\nimport _ from \"lodash\";\nimport fetch from \"isomorphic-fetch\";\nimport moment from 'moment';\nimport GoogleMaps from \"../components/GoogleMaps\";\nimport CensusHousingType from \"../components/census/CensusHousingType\";\nimport CensusHousingTenure from \"../components/census/CensusHousingTenure\";\nimport CensusEthnicGroup from \"../components/census/CensusEthnicGroup\";\nimport LocalAreaList from \"../components/LocalAreaList\";\nimport CensusReligion from \"../components/census/CensusReligion\";\nimport CensusAge from \"../components/census/CensusAge\";\nimport CensusGender from \"../components/census/CensusGender\";\nimport CensusHealth from \"../components/census/CensusHealth\";\nimport CensusEducation from \"../components/census/CensusEducation\";\n\nclass Street extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isMarkerShown: false,\n            localAreaLoading: false,\n            localArea: [],\n            propertyDataLoading: false,\n            census: []\n        }\n    }\n\n    delayedShowMarker() {\n        setTimeout(() => {\n            this.setState({isMarkerShown: true})\n        }, 3000)\n    }\n\n    handleMarkerClick() {\n        this.setState({isMarkerShown: false});\n        this.delayedShowMarker()\n    }\n\n    componentDidMount() {\n        this.delayedShowMarker();\n        this.getLocalArea(this.props.postcode);\n    }\n\n    pricesList(prices) {\n        let price = null;\n\n        if (!_.isEmpty(prices)) {\n            price = prices.map(function (p) {\n                return (\n                    <div key={p.id}>\n                        {p.sold_date} - &pound;{p.price}\n                    </div>\n                );\n            });\n        }\n\n        return price;\n    }\n\n    getLocalArea(postcode) {\n        this.setState({localAreaLoading: true});\n        let self = this;\n\n        fetch(process.env.BACKEND_URL + \"postcode/\" + postcode + '/localarea')\n            .then(function (response) {\n                return response.json();\n            }).then(function (localArea) {\n            self.setState(prevState => ({\n                localAreaLoading: false,\n                localArea: [...prevState.localArea, localArea]\n            }));\n        });\n    }\n\n\n    render() {\n        if (_.isEmpty(this.props.addresses) && _.isEmpty(this.props.sold_prices)) {\n            return null;\n        }\n\n        const housePriceIndex = _.orderBy(this.props.addresses.hpi, [\"date\"], [\"desc\"])[0][0];\n        const {addresses} = this.props.addresses;\n\n        let marker = {lng: _.toNumber(this.props.addresses.lng), lat: _.toNumber(this.props.addresses.lat)};\n        let localArea = _.head(this.state.localArea);\n\n\n        return (\n            <div>\n                <div className=\"container postcode-page\">\n                    <div className=\"row\">\n\n                        <div className=\"col\">\n                            <h1>{_.toUpper(this.props.postcode)} Area Report</h1>\n                            <p>\n                                <span>Below you will find key statistics including sold prices, property valuations, energy performance, crime and local services for the {_.first(this.props.addresses.addresses.data).street}, {_.first(this.props.addresses.addresses.data).town}, {_.first(this.props.addresses.addresses.data).postcode} area. If you want specific property information select the address under ‘Properties Section’. You can freely use our AVM to generate property valuations and our EnergyVault app to predict a properties efficiency and running costs. </span>\n                            </p>\n\n                            <GoogleMaps\n                                isMarkerShown={this.state.isMarkerShown}\n                                onMarkerClick={this.handleMarkerClick}\n                                markerPosition={marker}\n                                zoom={11}\n                            />\n                            <br/>\n\n                            <div className=\"row\">\n                                <div className=\"col\">\n                                    <CensusHousingType areacode={this.props.addresses.census_code}/>\n                                </div>\n                                <div className=\"col\">\n                                    <CensusHousingTenure areacode={this.props.addresses.census_code}/>\n                                </div>\n                            </div>\n\n                            <div className=\"row\">\n                                <div className=\"col\">\n                                    <CensusEthnicGroup areacode={this.props.addresses.census_code}/>\n                                </div>\n                                <div className=\"col\">\n                                    <CensusReligion areacode={this.props.addresses.census_code}/>\n                                </div>\n                            </div>\n\n                            <div className=\"row\">\n                                <div className=\"col\">\n                                    <CensusAge areacode={this.props.addresses.census_code}/>\n                                </div>\n                                <div className=\"col\">\n                                    <CensusEducation areacode={this.props.addresses.census_code}/>\n                                </div>\n                            </div>\n\n                            <div className=\"row\">\n                                <div className=\"col\">\n                                    <CensusGender areacode={this.props.addresses.census_code}/>\n                                </div>\n                                <div className=\"col\">\n                                    <CensusHealth areacode={this.props.addresses.census_code}/>\n                                </div>\n                            </div>\n\n                            <h2>Sold Prices</h2>\n                            {this.props.sold_prices.map((price) => (\n                                <div key={price.id}>\n                                    <div className=\"row\">\n                                        <div className=\"col\">\n                                            <div className=\"table-responsive\">\n                                                <table className=\"table\">\n                                                    <tbody>\n                                                    <tr>\n                                                        <td scope=\"row\"><b>{price.poan} {price.street}</b> - Sold\n                                                            on <i>{moment(price.sold_date, \"YYYY-MM-DD HH:mm:ss\").format('Do MMMM YYYY')}</i>\n                                                        </td>\n\n                                                        <td className=\"text-right \">&pound;{price.price}</td>\n                                                    </tr>\n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            ))}\n                            <div className=\"row\">\n                                <div className=\"col text-center\">\n                                    <button className=\"btn btn-link \">Load More</button>\n                                </div>\n                            </div>\n\n                            <h2>Local Area</h2>\n                            {(!_.isEmpty(localArea)) ?\n                                <div>\n                                    <h3>Closest Primary Schools to this address </h3>\n                                    <LocalAreaList list={localArea.primary_schools}/>\n                                </div> : ''}\n                            {(!_.isEmpty(localArea)) ?\n                                <div>\n                                    <h3>Closest Secondary Schools to this address </h3>\n                                    <LocalAreaList list={localArea.secondary_schools}/>\n                                </div>\n                                : ''}\n\n                            <h2>Properties</h2>\n                            {addresses.data.map((address) => (\n\n                                <div key={address.id}>\n                                    <div className=\"row\">\n                                        <div className=\"col\">\n                                            <div className=\"property-header\">\n                                                <h6>{address.full_address} <i className=\"fas fa-caret-right\"></i></h6>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"row\">\n                                        <hr/>\n                                        <div className=\"col\">\n                                            <img\n                                                src={encodeURI(\"https://maps.googleapis.com/maps/api/streetview?size=100x100&location=\" + address.house_number + \",\" + address.street + \",\" + address.postcode + \"&fov=60&pitch=5&key=AIzaSyAcODcVyIBZJhmueCEdpCU7MNlMISDGSkQ\")}\n                                                className=\"property-image\"/>\n                                        </div>\n                                        <div className=\"col\">\n                                            Last Sold Price<br/>\n                                            {(!_.isNaN(_.meanBy(address.prices.data, \"price\"))) ? (\"£\" + _.meanBy(address.prices.data, \"price\")) : 'No sales history for this property'}\n                                        </div>\n                                        <div className=\"col\">\n                                            EPC Rating<br/>\n                                            {(_.first(_.orderBy(address.epc.data, ['id'], ['desc']))) ? _.first(_.orderBy(address.epc.data, ['id'], ['desc'])).current_energy_rating : 'None'}\n                                        </div>\n                                        <div className=\"col text-right\">\n                                            <h5>{(address.valuation && housePriceIndex.index) ? 'Estimated Value £' + _.round(_.multiply(_.divide(parseInt(address.valuation.data.predicted_valuation), 100), parseInt(housePriceIndex.index))).toLocaleString() :\n                                                <button className=\"btn btn-primary\">Request Valuation</button>}</h5>\n                                        </div>\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nStreet.getInitialProps = async ({req, query: {postcode}}) => {\n    const res = await fetch(process.env.BACKEND_URL + \"postcode/\" + postcode);\n    const json = await res.json();\n    return {addresses: json.postcode_details.data, sold_prices: json.sold_prices, postcode: postcode}\n};\nexport default Street;\n\n\n\n// WEBPACK FOOTER //\n// pages/street.js","module.exports = require(\"@babel/runtime/regenerator\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@babel/runtime/regenerator\"\n// module id = @babel/runtime/regenerator\n// module chunks = 3","module.exports = require(\"isomorphic-fetch\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"isomorphic-fetch\"\n// module id = isomorphic-fetch\n// module chunks = 3","module.exports = require(\"lodash\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash\"\n// module id = lodash\n// module chunks = 3","module.exports = require(\"moment\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"moment\"\n// module id = moment\n// module chunks = 3","module.exports = require(\"moment/moment\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"moment/moment\"\n// module id = moment/moment\n// module chunks = 3","module.exports = require(\"react\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react\"\n// module id = react\n// module chunks = 0 3","module.exports = require(\"react-chartjs-2\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react-chartjs-2\"\n// module id = react-chartjs-2\n// module chunks = 3","module.exports = require(\"react-google-maps\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react-google-maps\"\n// module id = react-google-maps\n// module chunks = 3","module.exports = require(\"recompose\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"recompose\"\n// module id = recompose\n// module chunks = 3"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAQA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAUA;;;;AA1BA;AACA;AA8BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAFA;AAMA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;AAE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","sourceRoot":""}